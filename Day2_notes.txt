


step4:
---------
prices = [   float(value[1:])   for value in chipo['item_price']]
prices
chipo['item_price']  = prices
chipo


# delte duplicateds 
chipo_filtered = chipo.drop_duplicates(['item_name','quantity','choice_description'])

chipo_one_prod = chipo_filtered[chipo['quantity'] == 1]


chipo_one_prod[chipo_one_prod['item_price'] > 10]






step5:
chipo_filtered = chipo.drop_duplicates(['item_name','quantity'])
chipo_one_prod = chipo_filtered[chipo_filtered['quantity'] == 1]
required = chipo_one_prod[['item_name','item_price']]
required
required.sort_values(by="item_price", ascending=False)




##################################
# grouping
#################################

steo5:

myfunction = lambda x: 1  if x == "M" else 0
users['gender_numeric'] = users['gender'].apply(myfunction)
users

output = users.groupby('occupation')['gender_numeric'].sum()  / users['occupation'].value_counts()  * 100
output.sort_values(ascending=False)




step6:
users.groupby('occupation')['age'].agg(['min','max'])


step7:
users.groupby(['occupation','gender'])['age'].mean()

step8:
num = users.groupby(["occupation","gender"]).agg({"gender":"count"})

den = users.groupby("occupation").agg("count")


output = num/den * 100

output.loc[:,"gender"]   # df.loc[rows, columns]   # : means all the rows



